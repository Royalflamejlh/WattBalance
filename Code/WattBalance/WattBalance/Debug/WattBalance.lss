
WattBalance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000012d2  00001366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800102  00800102  00001368  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000002a  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000330  00000000  00000000  00001428  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002590  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000139c  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000016f3  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006a4  00000000  00000000  00006778  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ac3  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000edb  00000000  00000000  000078df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000260  00000000  00000000  000087ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_7>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_33>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <get_current_coila+0x1e>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__trampolines_end>:
      d2:	3f 06       	cpc	r3, r31
      d4:	5b 4f       	sbci	r21, 0xFB	; 251
      d6:	66 6d       	ori	r22, 0xD6	; 214
      d8:	7d 07       	cpc	r23, r29
      da:	7f 6f       	ori	r23, 0xFF	; 255

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e2 ed       	ldi	r30, 0xD2	; 210
      f0:	f2 e1       	ldi	r31, 0x12	; 18
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 30       	cpi	r26, 0x02	; 2
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	a2 e0       	ldi	r26, 0x02	; 2
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a4 3e       	cpi	r26, 0xE4	; 228
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 c0 04 	call	0x980	; 0x980 <main>
     112:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <i2c_delay_T2>:
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 3 cycles
#if F_CPU <= 4000000UL
	rjmp 1f      ; 2   "
     11a:	00 c0       	rjmp	.+0      	; 0x11c <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     11c:	00 c0       	rjmp	.+0      	; 0x11e <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     11e:	00 c0       	rjmp	.+0      	; 0x120 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     120:	00 c0       	rjmp	.+0      	; 0x122 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     122:	00 c0       	rjmp	.+0      	; 0x124 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     124:	00 c0       	rjmp	.+0      	; 0x126 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     126:	00 00       	nop
	ret          ; 4   "  total 20 cyles = 5.0 microsec with 4 Mhz crystal 
     128:	08 95       	ret

0000012a <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     12a:	68 98       	cbi	0x0d, 0	; 13
	cbi SCL_DDR,SCL		;release SCL
     12c:	69 98       	cbi	0x0d, 1	; 13
	cbi SDA_OUT,SDA
     12e:	70 98       	cbi	0x0e, 0	; 14
	cbi SCL_OUT,SCL
     130:	71 98       	cbi	0x0e, 1	; 14
	ret
     132:	08 95       	ret

00000134 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     134:	68 9a       	sbi	0x0d, 0	; 13
	rcall 	i2c_delay_T2	;delay T/2
     136:	f1 df       	rcall	.-30     	; 0x11a <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     138:	1d d0       	rcall	.+58     	; 0x174 <i2c_write>
	ret
     13a:	08 95       	ret

0000013c <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     13c:	69 9a       	sbi	0x0d, 1	; 13
	rcall 	i2c_delay_T2	;delay  T/2
     13e:	ed df       	rcall	.-38     	; 0x11a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     140:	68 98       	cbi	0x0d, 0	; 13
	rcall	i2c_delay_T2	;delay T/2
     142:	eb df       	rcall	.-42     	; 0x11a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     144:	69 98       	cbi	0x0d, 1	; 13
	rcall 	i2c_delay_T2	;delay  T/2
     146:	e9 df       	rcall	.-46     	; 0x11a <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     148:	68 9a       	sbi	0x0d, 0	; 13
	rcall 	i2c_delay_T2	;delay	T/2
     14a:	e7 df       	rcall	.-50     	; 0x11a <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     14c:	13 d0       	rcall	.+38     	; 0x174 <i2c_write>
	ret
     14e:	08 95       	ret

00000150 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     150:	08 2e       	mov	r0, r24

00000152 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     152:	68 9a       	sbi	0x0d, 0	; 13
	rcall 	i2c_delay_T2	;delay T/2
     154:	e2 df       	rcall	.-60     	; 0x11a <i2c_delay_T2>
	mov	r24,__tmp_reg__
     156:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     158:	0d d0       	rcall	.+26     	; 0x174 <i2c_write>
	tst	r24		;if device not busy -> done
     15a:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     15c:	11 f0       	breq	.+4      	; 0x162 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     15e:	02 d0       	rcall	.+4      	; 0x164 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     160:	f8 cf       	rjmp	.-16     	; 0x152 <i2c_start_wait1>

00000162 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     162:	08 95       	ret

00000164 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     164:	69 9a       	sbi	0x0d, 1	; 13
	sbi	SDA_DDR,SDA	;force SDA low
     166:	68 9a       	sbi	0x0d, 0	; 13
	rcall	i2c_delay_T2	;delay T/2
     168:	d8 df       	rcall	.-80     	; 0x11a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     16a:	69 98       	cbi	0x0d, 1	; 13
	rcall	i2c_delay_T2	;delay T/2
     16c:	d6 df       	rcall	.-84     	; 0x11a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     16e:	68 98       	cbi	0x0d, 0	; 13
	rcall	i2c_delay_T2	;delay T/2
     170:	d4 df       	rcall	.-88     	; 0x11a <i2c_delay_T2>
	ret
     172:	08 95       	ret

00000174 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     174:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     176:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     178:	01 c0       	rjmp	.+2      	; 0x17c <i2c_write_first>

0000017a <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     17a:	88 0f       	add	r24, r24

0000017c <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     17c:	59 f0       	breq	.+22     	; 0x194 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     17e:	69 9a       	sbi	0x0d, 1	; 13
	brcc	i2c_write_low
     180:	18 f4       	brcc	.+6      	; 0x188 <i2c_write_low>
	nop
     182:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     184:	68 98       	cbi	0x0d, 0	; 13
	rjmp	i2c_write_high
     186:	02 c0       	rjmp	.+4      	; 0x18c <i2c_write_high>

00000188 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     188:	68 9a       	sbi	0x0d, 0	; 13
	rjmp	i2c_write_high
     18a:	00 c0       	rjmp	.+0      	; 0x18c <i2c_write_high>

0000018c <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     18c:	c6 df       	rcall	.-116    	; 0x11a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     18e:	69 98       	cbi	0x0d, 1	; 13
	rcall	i2c_delay_T2	;delay T/2
     190:	c4 df       	rcall	.-120    	; 0x11a <i2c_delay_T2>
	rjmp	i2c_write_bit
     192:	f3 cf       	rjmp	.-26     	; 0x17a <i2c_write_bit>

00000194 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     194:	69 9a       	sbi	0x0d, 1	; 13
	cbi	SDA_DDR,SDA	;release SDA
     196:	68 98       	cbi	0x0d, 0	; 13
	rcall	i2c_delay_T2	;delay T/2
     198:	c0 df       	rcall	.-128    	; 0x11a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     19a:	69 98       	cbi	0x0d, 1	; 13

0000019c <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     19c:	61 9b       	sbis	0x0c, 1	; 12
	rjmp	i2c_ack_wait
     19e:	fe cf       	rjmp	.-4      	; 0x19c <i2c_ack_wait>
	
	clr	r24		;return 0
     1a0:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     1a2:	60 99       	sbic	0x0c, 0	; 12
	ldi	r24,1
     1a4:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     1a6:	b9 df       	rcall	.-142    	; 0x11a <i2c_delay_T2>
	clr	r25
     1a8:	99 27       	eor	r25, r25
	ret
     1aa:	08 95       	ret

000001ac <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     1ac:	88 27       	eor	r24, r24
	rjmp	i2c_read
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <i2c_read>

000001b0 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     1b0:	81 e0       	ldi	r24, 0x01	; 1

000001b2 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     1b2:	71 e0       	ldi	r23, 0x01	; 1

000001b4 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     1b4:	69 9a       	sbi	0x0d, 1	; 13
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     1b6:	68 98       	cbi	0x0d, 0	; 13
	rcall	i2c_delay_T2	;delay T/2
     1b8:	b0 df       	rcall	.-160    	; 0x11a <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     1ba:	69 98       	cbi	0x0d, 1	; 13
	rcall	i2c_delay_T2	;delay T/2
     1bc:	ae df       	rcall	.-164    	; 0x11a <i2c_delay_T2>

000001be <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1be:	61 9b       	sbis	0x0c, 1	; 12
    rjmp	i2c_read_stretch
     1c0:	fe cf       	rjmp	.-4      	; 0x1be <i2c_read_stretch>
    	
	clc			;clear carry flag
     1c2:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1c4:	60 99       	sbic	0x0c, 0	; 12
	sec			;  set carry flag
     1c6:	08 94       	sec
	
	rol	r23		;store bit
     1c8:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1ca:	a0 f7       	brcc	.-24     	; 0x1b4 <i2c_read_bit>

000001cc <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1cc:	69 9a       	sbi	0x0d, 1	; 13
	cpi	r24,1
     1ce:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1d0:	11 f0       	breq	.+4      	; 0x1d6 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1d2:	68 98       	cbi	0x0d, 0	; 13
	rjmp	i2c_put_ack_high
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <i2c_put_ack_high>

000001d6 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1d6:	68 9a       	sbi	0x0d, 0	; 13

000001d8 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1d8:	a0 df       	rcall	.-192    	; 0x11a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1da:	69 98       	cbi	0x0d, 1	; 13

000001dc <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1dc:	61 9b       	sbis	0x0c, 1	; 12
	rjmp	i2c_put_ack_wait
     1de:	fe cf       	rjmp	.-4      	; 0x1dc <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1e0:	9c df       	rcall	.-200    	; 0x11a <i2c_delay_T2>
	mov	r24,r23
     1e2:	87 2f       	mov	r24, r23
	clr	r25
     1e4:	99 27       	eor	r25, r25
	ret
     1e6:	08 95       	ret

000001e8 <init_adc>:
/*
* init_adc
* This function enables ADC capabilities on the ATMega
*/
void init_adc(void) {
	ADMUX = ADC_REF_AVCC;
     1e8:	80 e4       	ldi	r24, 0x40	; 64
     1ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ADC_ENABLE | ADC_PRESCALER_128;
     1ee:	87 e8       	ldi	r24, 0x87	; 135
     1f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1f4:	08 95       	ret

000001f6 <read_adc>:
 * Reads an ADC value from a specified channel.
 * Parameters: channel - ADC channel to read
 * Returns: ADC conversion result as a uint16_t
 */
u16 read_adc(u8 channel){
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
     1f6:	ec e7       	ldi	r30, 0x7C	; 124
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	90 81       	ld	r25, Z
     1fc:	90 7f       	andi	r25, 0xF0	; 240
     1fe:	8f 70       	andi	r24, 0x0F	; 15
     200:	89 2b       	or	r24, r25
     202:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     204:	ea e7       	ldi	r30, 0x7A	; 122
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	80 64       	ori	r24, 0x40	; 64
     20c:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
     20e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     212:	86 fd       	sbrc	r24, 6
     214:	fc cf       	rjmp	.-8      	; 0x20e <read_adc+0x18>
	return ADC;
     216:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     21a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     21e:	08 95       	ret

00000220 <compute_sine_wave>:
volatile int wave_index = 0; // Stores where in the wave we are.
u16 sine_wave[MAX_SAMPLES_PER_CYCLE]; // Wave table.
u8 sin_samples = 0; // How many samples are in the wave table
u16 dac_timer_period = 0; // The period for the dac

static void compute_sine_wave(u16 samples) {
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	8c 01       	movw	r16, r24
	for (int i = 0; i < samples; i++) {
     232:	c0 e0       	ldi	r28, 0x00	; 0
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	33 c0       	rjmp	.+102    	; 0x29e <compute_sine_wave+0x7e>
		double value = sin((2 * PI * i) / samples);
     238:	be 01       	movw	r22, r28
     23a:	0d 2e       	mov	r0, r29
     23c:	00 0c       	add	r0, r0
     23e:	88 0b       	sbc	r24, r24
     240:	99 0b       	sbc	r25, r25
     242:	0e 94 51 07 	call	0xea2	; 0xea2 <__floatsisf>
     246:	2b ed       	ldi	r18, 0xDB	; 219
     248:	3f e0       	ldi	r19, 0x0F	; 15
     24a:	49 ec       	ldi	r20, 0xC9	; 201
     24c:	50 e4       	ldi	r21, 0x40	; 64
     24e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     252:	6b 01       	movw	r12, r22
     254:	7c 01       	movw	r14, r24
     256:	b8 01       	movw	r22, r16
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatunsisf>
     260:	9b 01       	movw	r18, r22
     262:	ac 01       	movw	r20, r24
     264:	c7 01       	movw	r24, r14
     266:	b6 01       	movw	r22, r12
     268:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     26c:	0e 94 4f 08 	call	0x109e	; 0x109e <sin>
		sine_wave[i] = (u16)((value + 1) * 2047.5) & 0x0FFF; // Shift and scale to 12-bit range
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e8       	ldi	r20, 0x80	; 128
     276:	5f e3       	ldi	r21, 0x3F	; 63
     278:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 ef       	ldi	r19, 0xF0	; 240
     280:	4f ef       	ldi	r20, 0xFF	; 255
     282:	54 e4       	ldi	r21, 0x44	; 68
     284:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     288:	0e 94 20 07 	call	0xe40	; 0xe40 <__fixunssfsi>
     28c:	7f 70       	andi	r23, 0x0F	; 15
     28e:	fe 01       	movw	r30, r28
     290:	ee 0f       	add	r30, r30
     292:	ff 1f       	adc	r31, r31
     294:	e4 5e       	subi	r30, 0xE4	; 228
     296:	fe 4f       	sbci	r31, 0xFE	; 254
     298:	71 83       	std	Z+1, r23	; 0x01
     29a:	60 83       	st	Z, r22
u16 sine_wave[MAX_SAMPLES_PER_CYCLE]; // Wave table.
u8 sin_samples = 0; // How many samples are in the wave table
u16 dac_timer_period = 0; // The period for the dac

static void compute_sine_wave(u16 samples) {
	for (int i = 0; i < samples; i++) {
     29c:	21 96       	adiw	r28, 0x01	; 1
     29e:	c0 17       	cp	r28, r16
     2a0:	d1 07       	cpc	r29, r17
     2a2:	50 f2       	brcs	.-108    	; 0x238 <compute_sine_wave+0x18>
		double value = sin((2 * PI * i) / samples);
		sine_wave[i] = (u16)((value + 1) * 2047.5) & 0x0FFF; // Shift and scale to 12-bit range
	}
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	08 95       	ret

000002b6 <set_period_dac>:

void set_period_dac(u16 period){ //period for each full wave in ms
	dac_timer_period = period / sin_samples;
     2b6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <sin_samples>
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	0e 94 03 09 	call	0x1206	; 0x1206 <__udivmodhi4>
     2c0:	cb 01       	movw	r24, r22
     2c2:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
     2c6:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
	set_period_timer3(dac_timer_period);
     2ca:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <set_period_timer3>
     2ce:	08 95       	ret

000002d0 <send_dac_value>:
}

void send_dac_value(uint16_t dac_value) {
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
	uint8_t command[4];
	command[0] = 0b01000000; //Write command
	
	dac_value &= 0x0FFF;
     2d4:	9f 70       	andi	r25, 0x0F	; 15
	command[1] = dac_value >> 4;
     2d6:	ec 01       	movw	r28, r24
     2d8:	d2 95       	swap	r29
     2da:	c2 95       	swap	r28
     2dc:	cf 70       	andi	r28, 0x0F	; 15
     2de:	cd 27       	eor	r28, r29
     2e0:	df 70       	andi	r29, 0x0F	; 15
     2e2:	cd 27       	eor	r28, r29
	command[2] = (dac_value & 0x000F) << 4;
	i2c_start(DAC_ADDRESS+I2C_WRITE);
     2e4:	88 ec       	ldi	r24, 0xC8	; 200
     2e6:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start>
	i2c_write(command[0]); 
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
	i2c_write(command[1]); 
     2f0:	8c 2f       	mov	r24, r28
     2f2:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
	i2c_stop();
     2f6:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_stop>
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <dac_callback>:

void dac_callback(){
	send_dac_value(sine_wave[wave_index]);
     300:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <wave_index>
     304:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <wave_index+0x1>
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e4 5e       	subi	r30, 0xE4	; 228
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	80 81       	ld	r24, Z
     312:	91 81       	ldd	r25, Z+1	; 0x01
     314:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_dac_value>
	wave_index = (wave_index + 1) % sin_samples;
     318:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wave_index>
     31c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <wave_index+0x1>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <sin_samples>
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     32c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <wave_index+0x1>
     330:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <wave_index>
     334:	08 95       	ret

00000336 <start_dac>:
}
	
void start_dac(void){
	init_timer3(dac_timer_period, dac_callback);
     336:	60 e8       	ldi	r22, 0x80	; 128
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     33e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     342:	0e 94 c8 05 	call	0xb90	; 0xb90 <init_timer3>
     346:	08 95       	ret

00000348 <stop_dac>:
}

void stop_dac(void){
	stop_timer3();
     348:	0e 94 07 06 	call	0xc0e	; 0xc0e <stop_timer3>
	send_dac_value(DAC_IDLE_VALUE);
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	97 e0       	ldi	r25, 0x07	; 7
     350:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_dac_value>
     354:	08 95       	ret

00000356 <init_dac>:
}

void init_dac(u8 samples){
     356:	cf 93       	push	r28
     358:	c8 2f       	mov	r28, r24
	compute_sine_wave(samples);
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 10 01 	call	0x220	; 0x220 <compute_sine_wave>
	sin_samples = samples;
     360:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <sin_samples>
	i2c_init();
     364:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_init>
	send_dac_value(DAC_IDLE_VALUE);
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	97 e0       	ldi	r25, 0x07	; 7
     36c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_dac_value>
}
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <init_display>:
/*-----------------------------------------------------------------
 * 4x7 Segment LED Display Control (Tm1637)
 * Ports PB0 (Dio), PB1 (CLK)
 *-----------------------------------------------------------------*/
void init_display(void){
	TM1637_init(HIGH, 7); // Set the Display to on at the max brightness.
     374:	67 e0       	ldi	r22, 0x07	; 7
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 45 03 	call	0x68a	; 0x68a <TM1637_init>
	TM1637_enable(HIGH); // Make sure the display is on.
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 4e 03 	call	0x69c	; 0x69c <TM1637_enable>
	TM1637_display_colon(HIGH); // Turn on the colon.
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TM1637_display_colon>
     388:	08 95       	ret

0000038a <set_value_display>:
}

void set_value_display(double value){
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	6b 01       	movw	r12, r22
     39c:	7c 01       	movw	r14, r24
	TM1637_clear();
     39e:	0e 94 91 03 	call	0x722	; 0x722 <TM1637_clear>
	
	int displayValue = (int)(value * 100 + 0.5);
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	48 ec       	ldi	r20, 0xC8	; 200
     3a8:	52 e4       	ldi	r21, 0x42	; 66
     3aa:	c7 01       	movw	r24, r14
     3ac:	b6 01       	movw	r22, r12
     3ae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	5f e3       	ldi	r21, 0x3F	; 63
     3ba:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     3be:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixsfsi>
     3c2:	eb 01       	movw	r28, r22
	TM1637_display_digit(3, displayValue % 10);
     3c4:	0a e0       	ldi	r16, 0x0A	; 10
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	cb 01       	movw	r24, r22
     3ca:	b8 01       	movw	r22, r16
     3cc:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     3d0:	7b 01       	movw	r14, r22
     3d2:	68 2f       	mov	r22, r24
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TM1637_display_digit>
	
	displayValue /= 10;
	TM1637_display_digit(2, displayValue % 10 | 0x80);
     3da:	c7 01       	movw	r24, r14
     3dc:	b8 01       	movw	r22, r16
     3de:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     3e2:	68 2f       	mov	r22, r24
     3e4:	60 68       	ori	r22, 0x80	; 128
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TM1637_display_digit>
	
	displayValue /= 10;
     3ec:	ce 01       	movw	r24, r28
     3ee:	64 e6       	ldi	r22, 0x64	; 100
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     3f6:	cb 01       	movw	r24, r22
	TM1637_display_digit(1, displayValue % 10);
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     3fe:	68 2f       	mov	r22, r24
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TM1637_display_digit>
	
	displayValue /= 10;
     406:	ce 01       	movw	r24, r28
     408:	68 ee       	ldi	r22, 0xE8	; 232
     40a:	73 e0       	ldi	r23, 0x03	; 3
     40c:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     410:	cb 01       	movw	r24, r22
	TM1637_display_digit(0, displayValue % 10);
     412:	b8 01       	movw	r22, r16
     414:	0e 94 17 09 	call	0x122e	; 0x122e <__divmodhi4>
     418:	68 2f       	mov	r22, r24
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TM1637_display_digit>
	
	TM1637_display_colon(HIGH); // Turn on the colon.
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TM1637_display_colon>
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	08 95       	ret

00000438 <pwm_callback>:

static volatile u8 duty_cycle = 0;
static volatile u8 current_tick = 0;

void pwm_callback(){
	if (current_tick < duty_cycle) {
     438:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current_tick>
     43c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <duty_cycle>
     440:	98 17       	cp	r25, r24
     442:	20 f4       	brcc	.+8      	; 0x44c <pwm_callback+0x14>
		PORTD |= (1 << PORTD6) | (1 << PORTD7);  // Set PD6 and PD7 high.
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	80 6c       	ori	r24, 0xC0	; 192
     448:	8b b9       	out	0x0b, r24	; 11
     44a:	03 c0       	rjmp	.+6      	; 0x452 <pwm_callback+0x1a>
	} else {
		PORTD &= ~((1 << PORTD6) | (1 << PORTD7));  // Set PD6 and PD7 low.
     44c:	8b b1       	in	r24, 0x0b	; 11
     44e:	8f 73       	andi	r24, 0x3F	; 63
     450:	8b b9       	out	0x0b, r24	; 11
	}
	current_tick = (current_tick + 1) % DUTY_CYCLE_LENGTH;
     452:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <current_tick>
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	90 78       	andi	r25, 0x80	; 128
     45c:	99 23       	and	r25, r25
     45e:	1c f4       	brge	.+6      	; 0x466 <pwm_callback+0x2e>
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	9f 6f       	ori	r25, 0xFF	; 255
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <current_tick>
     46a:	08 95       	ret

0000046c <set_pwm>:
}

void set_pwm(u16 new_duty_cycle) {
	duty_cycle = (new_duty_cycle * DUTY_CYCLE_LENGTH) / 100; // Turn percentage into a tick
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	38 2f       	mov	r19, r24
     472:	36 95       	lsr	r19
     474:	27 95       	ror	r18
     476:	36 95       	lsr	r19
     478:	27 95       	ror	r18
     47a:	ab e7       	ldi	r26, 0x7B	; 123
     47c:	b4 e1       	ldi	r27, 0x14	; 20
     47e:	0e 94 4d 09 	call	0x129a	; 0x129a <__umulhisi3>
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <duty_cycle>
     48a:	08 95       	ret

0000048c <init_hb>:
}

void init_hb(void){
	current_tick = 0; // Reset current tick value.
     48c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <current_tick>
	
	DDRD |= (1 << PORTD6) | (1 << PORTD7); // Setup D6 and D7 for Output.
     490:	8a b1       	in	r24, 0x0a	; 10
     492:	80 6c       	ori	r24, 0xC0	; 192
     494:	8a b9       	out	0x0a, r24	; 10
	
	DDRD  |= (1 << PORTD4);  // Enable D4 for output.
     496:	8a b1       	in	r24, 0x0a	; 10
     498:	80 61       	ori	r24, 0x10	; 16
     49a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PORTD4); // Make D4 active low.
     49c:	8b b1       	in	r24, 0x0b	; 11
     49e:	8f 7e       	andi	r24, 0xEF	; 239
     4a0:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1 << PORTD5);  // Enable PD5 as an input.
     4a2:	8a b1       	in	r24, 0x0a	; 10
     4a4:	8f 7d       	andi	r24, 0xDF	; 223
     4a6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD5);  // Enable pull-up resistor on PD5.
     4a8:	8b b1       	in	r24, 0x0b	; 11
     4aa:	80 62       	ori	r24, 0x20	; 32
     4ac:	8b b9       	out	0x0b, r24	; 11
	
	PORTD |= (1 << PORTD4);  // Enable chip setting sleep high.
     4ae:	8b b1       	in	r24, 0x0b	; 11
     4b0:	80 61       	ori	r24, 0x10	; 16
     4b2:	8b b9       	out	0x0b, r24	; 11
     4b4:	08 95       	ret

000004b6 <start_pwm>:
	
}

void start_pwm(){
	current_tick = 0; // Reset current tick value.
     4b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <current_tick>
	init_timer2(HB_TIMER, pwm_callback); // Start the timer
     4ba:	6c e1       	ldi	r22, 0x1C	; 28
     4bc:	72 e0       	ldi	r23, 0x02	; 2
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 70 05 	call	0xae0	; 0xae0 <init_timer2>
     4c6:	08 95       	ret

000004c8 <stop_pwm>:
}

void stop_pwm(){
	stop_timer2(); // Stop the timer to stop the output
     4c8:	0e 94 95 05 	call	0xb2a	; 0xb2a <stop_timer2>
	current_tick = 0; // Reset current tick value.
     4cc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <current_tick>
	PORTD &= ~((1 << PORTD6) | (1 << PORTD7));  // Set PD6 and PD7 low.
     4d0:	8b b1       	in	r24, 0x0b	; 11
     4d2:	8f 73       	andi	r24, 0x3F	; 63
     4d4:	8b b9       	out	0x0b, r24	; 11
     4d6:	08 95       	ret

000004d8 <init_led>:
/*-----------------------------------------------------------------
 * Indicator LED Control
 * Ports PB2 (Booted), PD2 (Calibrated)
 *-----------------------------------------------------------------*/
void init_led(void){
	DDRB |= (1 << PORTB2); // Enable B2 for writing.
     4d8:	84 b1       	in	r24, 0x04	; 4
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD2); // Enable D2 for writing.
     4de:	8a b1       	in	r24, 0x0a	; 10
     4e0:	84 60       	ori	r24, 0x04	; 4
     4e2:	8a b9       	out	0x0a, r24	; 10
     4e4:	08 95       	ret

000004e6 <set_boot_led>:
}

void set_boot_led(u8 state){
	if(state){
     4e6:	88 23       	and	r24, r24
     4e8:	21 f0       	breq	.+8      	; 0x4f2 <set_boot_led+0xc>
		PORTB |= (1 << PORTB2); // Set PB2 high.
     4ea:	85 b1       	in	r24, 0x05	; 5
     4ec:	84 60       	ori	r24, 0x04	; 4
     4ee:	85 b9       	out	0x05, r24	; 5
     4f0:	08 95       	ret
	} else{
		PORTB &= ~(1 << PORTB2); // Set PB2 low.
     4f2:	85 b1       	in	r24, 0x05	; 5
     4f4:	8b 7f       	andi	r24, 0xFB	; 251
     4f6:	85 b9       	out	0x05, r24	; 5
     4f8:	08 95       	ret

000004fa <set_calibrate_led>:
	}
}

void set_calibrate_led(u8 state){
	if(state){
     4fa:	88 23       	and	r24, r24
     4fc:	21 f0       	breq	.+8      	; 0x506 <set_calibrate_led+0xc>
		PORTD |= (1 << PORTD2); // Set PB2 high.
     4fe:	8b b1       	in	r24, 0x0b	; 11
     500:	84 60       	ori	r24, 0x04	; 4
     502:	8b b9       	out	0x0b, r24	; 11
     504:	08 95       	ret
		} else{
		PORTD &= ~(1 << PORTD2); // Set PB2 low.
     506:	8b b1       	in	r24, 0x0b	; 11
     508:	8b 7f       	andi	r24, 0xFB	; 251
     50a:	8b b9       	out	0x0b, r24	; 11
     50c:	08 95       	ret

0000050e <init_switch>:
/*-----------------------------------------------------------------
 * Switch Mode Control
 * Port PD3
 *-----------------------------------------------------------------*/
void init_switch(){
	DDRD &= ~(1 << PORTD3);  // Enable PD3 as an input.
     50e:	8a b1       	in	r24, 0x0a	; 10
     510:	87 7f       	andi	r24, 0xF7	; 247
     512:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD3);  // Enable pull-up resistor on PD3.
     514:	8b b1       	in	r24, 0x0b	; 11
     516:	88 60       	ori	r24, 0x08	; 8
     518:	8b b9       	out	0x0b, r24	; 11
	
	// Configure INT1 to trigger on any logical change
	EICRA |= (1 << ISC10); 
     51a:	e9 e6       	ldi	r30, 0x69	; 105
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	84 60       	ori	r24, 0x04	; 4
     522:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC11);
     524:	80 81       	ld	r24, Z
     526:	87 7f       	andi	r24, 0xF7	; 247
     528:	80 83       	st	Z, r24

	// Enable INT1
	EIMSK |= (1 << INT1);
     52a:	8d b3       	in	r24, 0x1d	; 29
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	8d bb       	out	0x1d, r24	; 29
     530:	08 95       	ret

00000532 <get_switch>:
}

u8 get_switch(void){
	return !(PIND & (1 << PORTD3));  // Return 1 if switch is pressed, 0 otherwise
     532:	89 b1       	in	r24, 0x09	; 9
     534:	86 95       	lsr	r24
     536:	86 95       	lsr	r24
     538:	86 95       	lsr	r24
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	89 27       	eor	r24, r25
}
     53e:	81 70       	andi	r24, 0x01	; 1
     540:	08 95       	ret

00000542 <init_spi_he>:
/*-----------------------------------------------------------------
 * Hall Effect Sensor (ERCK 05SPI 360) SPI Setup
 * Ports PE3 (MOSI), PE2 (SS), PC0 (MISO), PC1 (SCK)
 *-----------------------------------------------------------------*/
void init_spi_he(void){
     542:	08 95       	ret

00000544 <init_uart>:
/*-----------------------------------------------------------------
 * UART Communication (FT232RL)
 * Ports PD0 (ATMega RX), PD1 (ATMega TX)
 *-----------------------------------------------------------------*/
void init_uart(u16 baud) {
    u16 ubrr_value = F_CPU / (16 * baud) - 1; // Calculate baud rate register value
     544:	82 95       	swap	r24
     546:	92 95       	swap	r25
     548:	90 7f       	andi	r25, 0xF0	; 240
     54a:	98 27       	eor	r25, r24
     54c:	80 7f       	andi	r24, 0xF0	; 240
     54e:	98 27       	eor	r25, r24
     550:	9c 01       	movw	r18, r24
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	74 e2       	ldi	r23, 0x24	; 36
     55a:	84 ef       	ldi	r24, 0xF4	; 244
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodsi4>
     562:	21 50       	subi	r18, 0x01	; 1
     564:	31 09       	sbc	r19, r1
    UBRR0H = (u8)(ubrr_value>>8);     // Set baud rate high byte
     566:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (u8)ubrr_value;          // Set baud rate low byte
     56a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);              // Enable receiver and transmitter
     56e:	88 e1       	ldi	r24, 0x18	; 24
     570:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);            // Set frame format: 8 data bits, 1 stop bit
     574:	86 e0       	ldi	r24, 0x06	; 6
     576:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     57a:	08 95       	ret

0000057c <TM1637_start>:

void
TM1637_set_brightness(const uint8_t value)
{

	TM1637_send_config(_config & TM1637_SET_DISPLAY_ON,
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	81 60       	ori	r24, 0x01	; 1
     580:	85 b9       	out	0x05, r24	; 5
     582:	85 b1       	in	r24, 0x05	; 5
     584:	82 60       	ori	r24, 0x02	; 2
     586:	85 b9       	out	0x05, r24	; 5
     588:	00 c0       	rjmp	.+0      	; 0x58a <TM1637_start+0xe>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <TM1637_start+0x10>
     58c:	00 00       	nop
     58e:	85 b1       	in	r24, 0x05	; 5
     590:	8e 7f       	andi	r24, 0xFE	; 254
     592:	85 b9       	out	0x05, r24	; 5
     594:	08 95       	ret

00000596 <TM1637_stop>:
     596:	85 b1       	in	r24, 0x05	; 5
     598:	8d 7f       	andi	r24, 0xFD	; 253
     59a:	85 b9       	out	0x05, r24	; 5
     59c:	00 c0       	rjmp	.+0      	; 0x59e <TM1637_stop+0x8>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <TM1637_stop+0xa>
     5a0:	00 00       	nop
     5a2:	85 b1       	in	r24, 0x05	; 5
     5a4:	8e 7f       	andi	r24, 0xFE	; 254
     5a6:	85 b9       	out	0x05, r24	; 5
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <TM1637_stop+0x14>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <TM1637_stop+0x16>
     5ac:	00 00       	nop
     5ae:	85 b1       	in	r24, 0x05	; 5
     5b0:	82 60       	ori	r24, 0x02	; 2
     5b2:	85 b9       	out	0x05, r24	; 5
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <TM1637_stop+0x20>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <TM1637_stop+0x22>
     5b8:	00 00       	nop
     5ba:	85 b1       	in	r24, 0x05	; 5
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	85 b9       	out	0x05, r24	; 5
     5c0:	08 95       	ret

000005c2 <TM1637_write_byte>:
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	17 c0       	rjmp	.+46     	; 0x5f4 <TM1637_write_byte+0x32>
     5c6:	95 b1       	in	r25, 0x05	; 5
     5c8:	9d 7f       	andi	r25, 0xFD	; 253
     5ca:	95 b9       	out	0x05, r25	; 5
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <TM1637_write_byte+0xc>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <TM1637_write_byte+0xe>
     5d0:	00 00       	nop
     5d2:	80 ff       	sbrs	r24, 0
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <TM1637_write_byte+0x1c>
     5d6:	95 b1       	in	r25, 0x05	; 5
     5d8:	91 60       	ori	r25, 0x01	; 1
     5da:	95 b9       	out	0x05, r25	; 5
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <TM1637_write_byte+0x22>
     5de:	95 b1       	in	r25, 0x05	; 5
     5e0:	9e 7f       	andi	r25, 0xFE	; 254
     5e2:	95 b9       	out	0x05, r25	; 5
     5e4:	95 b1       	in	r25, 0x05	; 5
     5e6:	92 60       	ori	r25, 0x02	; 2
     5e8:	95 b9       	out	0x05, r25	; 5
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <TM1637_write_byte+0x2a>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <TM1637_write_byte+0x2c>
     5ee:	00 00       	nop
     5f0:	2f 5f       	subi	r18, 0xFF	; 255
     5f2:	86 95       	lsr	r24
     5f4:	28 30       	cpi	r18, 0x08	; 8
     5f6:	38 f3       	brcs	.-50     	; 0x5c6 <TM1637_write_byte+0x4>
     5f8:	85 b1       	in	r24, 0x05	; 5
     5fa:	8d 7f       	andi	r24, 0xFD	; 253
     5fc:	85 b9       	out	0x05, r24	; 5
     5fe:	84 b1       	in	r24, 0x04	; 4
     600:	8e 7f       	andi	r24, 0xFE	; 254
     602:	84 b9       	out	0x04, r24	; 4
     604:	85 b1       	in	r24, 0x05	; 5
     606:	81 60       	ori	r24, 0x01	; 1
     608:	85 b9       	out	0x05, r24	; 5
     60a:	00 c0       	rjmp	.+0      	; 0x60c <TM1637_write_byte+0x4a>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <TM1637_write_byte+0x4c>
     60e:	00 00       	nop
     610:	93 b1       	in	r25, 0x03	; 3
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	49 2f       	mov	r20, r25
     616:	41 70       	andi	r20, 0x01	; 1
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	90 ff       	sbrs	r25, 0
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	14 16       	cp	r1, r20
     620:	15 06       	cpc	r1, r21
     622:	34 f4       	brge	.+12     	; 0x630 <TM1637_write_byte+0x6e>
     624:	94 b1       	in	r25, 0x04	; 4
     626:	91 60       	ori	r25, 0x01	; 1
     628:	94 b9       	out	0x04, r25	; 4
     62a:	95 b1       	in	r25, 0x05	; 5
     62c:	9e 7f       	andi	r25, 0xFE	; 254
     62e:	95 b9       	out	0x05, r25	; 5
     630:	00 c0       	rjmp	.+0      	; 0x632 <TM1637_write_byte+0x70>
     632:	00 c0       	rjmp	.+0      	; 0x634 <TM1637_write_byte+0x72>
     634:	00 00       	nop
     636:	95 b1       	in	r25, 0x05	; 5
     638:	92 60       	ori	r25, 0x02	; 2
     63a:	95 b9       	out	0x05, r25	; 5
     63c:	00 c0       	rjmp	.+0      	; 0x63e <TM1637_write_byte+0x7c>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <TM1637_write_byte+0x7e>
     640:	00 00       	nop
     642:	95 b1       	in	r25, 0x05	; 5
     644:	9d 7f       	andi	r25, 0xFD	; 253
     646:	95 b9       	out	0x05, r25	; 5
     648:	00 c0       	rjmp	.+0      	; 0x64a <TM1637_write_byte+0x88>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <TM1637_write_byte+0x8a>
     64c:	00 00       	nop
     64e:	94 b1       	in	r25, 0x04	; 4
     650:	91 60       	ori	r25, 0x01	; 1
     652:	94 b9       	out	0x04, r25	; 4
     654:	08 95       	ret

00000656 <TM1637_send_command>:
     656:	cf 93       	push	r28
     658:	c8 2f       	mov	r28, r24
     65a:	0e 94 be 02 	call	0x57c	; 0x57c <TM1637_start>
     65e:	8c 2f       	mov	r24, r28
     660:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TM1637_write_byte>
     664:	0e 94 cb 02 	call	0x596	; 0x596 <TM1637_stop>
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <TM1637_send_config>:
     66c:	88 23       	and	r24, r24
     66e:	11 f0       	breq	.+4      	; 0x674 <TM1637_send_config+0x8>
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	01 c0       	rjmp	.+2      	; 0x676 <TM1637_send_config+0xa>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	68 30       	cpi	r22, 0x08	; 8
     678:	08 f0       	brcs	.+2      	; 0x67c <TM1637_send_config+0x10>
     67a:	67 e0       	ldi	r22, 0x07	; 7
     67c:	86 2b       	or	r24, r22
     67e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_config>
     682:	80 68       	ori	r24, 0x80	; 128
     684:	0e 94 2b 03 	call	0x656	; 0x656 <TM1637_send_command>
     688:	08 95       	ret

0000068a <TM1637_init>:
     68a:	94 b1       	in	r25, 0x04	; 4
     68c:	93 60       	ori	r25, 0x03	; 3
     68e:	94 b9       	out	0x04, r25	; 4
     690:	95 b1       	in	r25, 0x05	; 5
     692:	9c 7f       	andi	r25, 0xFC	; 252
     694:	95 b9       	out	0x05, r25	; 5
     696:	0e 94 36 03 	call	0x66c	; 0x66c <TM1637_send_config>
     69a:	08 95       	ret

0000069c <TM1637_enable>:
     69c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_config>
     6a0:	67 70       	andi	r22, 0x07	; 7
     6a2:	0e 94 36 03 	call	0x66c	; 0x66c <TM1637_send_config>
     6a6:	08 95       	ret

000006a8 <TM1637_display_segments>:
		value & TM1637_BRIGHTNESS_MAX);
}

void
TM1637_display_segments(const uint8_t position, const uint8_t segments)
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	c8 2f       	mov	r28, r24
     6ae:	d6 2f       	mov	r29, r22

	TM1637_send_command(TM1637_CMD_SET_DATA | TM1637_SET_DATA_F_ADDR);
     6b0:	84 e4       	ldi	r24, 0x44	; 68
     6b2:	0e 94 2b 03 	call	0x656	; 0x656 <TM1637_send_command>
	TM1637_start();
     6b6:	0e 94 be 02 	call	0x57c	; 0x57c <TM1637_start>
	TM1637_write_byte(TM1637_CMD_SET_ADDR | (position & (TM1637_POSITION_MAX - 1)));
     6ba:	8c 2f       	mov	r24, r28
     6bc:	83 70       	andi	r24, 0x03	; 3
     6be:	80 6c       	ori	r24, 0xC0	; 192
     6c0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TM1637_write_byte>
	TM1637_write_byte(segments);
     6c4:	8d 2f       	mov	r24, r29
     6c6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TM1637_write_byte>
	TM1637_stop();
     6ca:	0e 94 cb 02 	call	0x596	; 0x596 <TM1637_stop>
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <TM1637_display_digit>:

void
TM1637_display_digit(const uint8_t position, const uint8_t digit)
{
	uint8_t segments = (digit < 10 ? pgm_read_byte_near((uint8_t *)&_digit2segments + digit) : 0x00);
     6d4:	6a 30       	cpi	r22, 0x0A	; 10
     6d6:	30 f4       	brcc	.+12     	; 0x6e4 <TM1637_display_digit+0x10>
     6d8:	e6 2f       	mov	r30, r22
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ee 52       	subi	r30, 0x2E	; 46
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	64 91       	lpm	r22, Z
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <TM1637_display_digit+0x12>
     6e4:	60 e0       	ldi	r22, 0x00	; 0

	if (position == 0x01) {
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	31 f4       	brne	.+12     	; 0x6f6 <TM1637_display_digit+0x22>
		segments = segments | (_segments & 0x80);
     6ea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6ee:	90 78       	andi	r25, 0x80	; 128
     6f0:	69 2b       	or	r22, r25
		_segments = segments;
     6f2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	TM1637_display_segments(position, segments);
     6f6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TM1637_display_segments>
     6fa:	08 95       	ret

000006fc <TM1637_display_colon>:

void
TM1637_display_colon(const uint8_t value)
{

	if (value) {
     6fc:	88 23       	and	r24, r24
     6fe:	31 f0       	breq	.+12     	; 0x70c <TM1637_display_colon+0x10>
		_segments |= 0x80;
     700:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     704:	80 68       	ori	r24, 0x80	; 128
     706:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     70a:	05 c0       	rjmp	.+10     	; 0x716 <TM1637_display_colon+0x1a>
	} else {
		_segments &= ~0x80;
     70c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     710:	8f 77       	andi	r24, 0x7F	; 127
     712:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	TM1637_display_segments(0x01, _segments);
     716:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TM1637_display_segments>
     720:	08 95       	ret

00000722 <TM1637_clear>:
}

void
TM1637_clear(void)
{
     722:	cf 93       	push	r28
	uint8_t i;

	for (i = 0; i < TM1637_POSITION_MAX; ++i) {
     724:	c0 e0       	ldi	r28, 0x00	; 0
     726:	05 c0       	rjmp	.+10     	; 0x732 <TM1637_clear+0x10>
		TM1637_display_segments(i, 0x00);
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	8c 2f       	mov	r24, r28
     72c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TM1637_display_segments>
void
TM1637_clear(void)
{
	uint8_t i;

	for (i = 0; i < TM1637_POSITION_MAX; ++i) {
     730:	cf 5f       	subi	r28, 0xFF	; 255
     732:	c4 30       	cpi	r28, 0x04	; 4
     734:	c8 f3       	brcs	.-14     	; 0x728 <TM1637_clear+0x6>
		TM1637_display_segments(i, 0x00);
	}
}
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <velocity_update>:
static volatile double vel_accumulated_blv = 0;
static volatile u16 vel_sample_count = 0;
static volatile i16 last_pos = 0;


void velocity_update(){
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
	double volt_a = get_voltage_coila();
     74e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <get_voltage_coila>
     752:	6b 01       	movw	r12, r22
     754:	7c 01       	movw	r14, r24
	i16 pos = get_position();
     756:	0e 94 21 05 	call	0xa42	; 0xa42 <get_position>
     75a:	ec 01       	movw	r28, r24
	double vel = (pos - last_pos) / (v_period / 1000.0);
     75c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <last_pos>
     760:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <last_pos+0x1>
     764:	be 01       	movw	r22, r28
     766:	68 1b       	sub	r22, r24
     768:	79 0b       	sbc	r23, r25
     76a:	07 2e       	mov	r0, r23
     76c:	00 0c       	add	r0, r0
     76e:	88 0b       	sbc	r24, r24
     770:	99 0b       	sbc	r25, r25
     772:	0e 94 51 07 	call	0xea2	; 0xea2 <__floatsisf>
     776:	2f e6       	ldi	r18, 0x6F	; 111
     778:	32 e1       	ldi	r19, 0x12	; 18
     77a:	43 e8       	ldi	r20, 0x83	; 131
     77c:	5a e3       	ldi	r21, 0x3A	; 58
     77e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     782:	4b 01       	movw	r8, r22
     784:	5c 01       	movw	r10, r24
	if (fabs(vel) > v_min) {
     786:	9f 77       	andi	r25, 0x7F	; 127
     788:	2a e0       	ldi	r18, 0x0A	; 10
     78a:	37 ed       	ldi	r19, 0xD7	; 215
     78c:	43 e2       	ldi	r20, 0x23	; 35
     78e:	5c e3       	ldi	r21, 0x3C	; 60
     790:	0e 94 dd 07 	call	0xfba	; 0xfba <__gesf2>
     794:	18 16       	cp	r1, r24
     796:	0c f5       	brge	.+66     	; 0x7da <velocity_update+0xa0>
		vel_accumulated_blv += volt_a / vel;
     798:	a5 01       	movw	r20, r10
     79a:	94 01       	movw	r18, r8
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     7a4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <vel_accumulated_blv>
     7a8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <vel_accumulated_blv+0x1>
     7ac:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <vel_accumulated_blv+0x2>
     7b0:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <vel_accumulated_blv+0x3>
     7b4:	0e 94 3b 06 	call	0xc76	; 0xc76 <__addsf3>
     7b8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <vel_accumulated_blv>
     7bc:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <vel_accumulated_blv+0x1>
     7c0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <vel_accumulated_blv+0x2>
     7c4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <vel_accumulated_blv+0x3>
		vel_sample_count++;
     7c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel_sample_count>
     7cc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <vel_sample_count+0x1>
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <vel_sample_count+0x1>
     7d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vel_sample_count>
	}
	last_pos = pos;
     7da:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <last_pos+0x1>
     7de:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <last_pos>
	
	// Reset accumulation after reaching max samples
	if (vel_sample_count >= v_max_samples) {
     7e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel_sample_count>
     7e6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <vel_sample_count+0x1>
     7ea:	88 38       	cpi	r24, 0x88	; 136
     7ec:	93 41       	sbci	r25, 0x13	; 19
     7ee:	78 f0       	brcs	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		vel_accumulated_blv = 0;
     7f0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <vel_accumulated_blv>
     7f4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <vel_accumulated_blv+0x1>
     7f8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <vel_accumulated_blv+0x2>
     7fc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <vel_accumulated_blv+0x3>
		vel_sample_count = 0;
     800:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <vel_sample_count+0x1>
     804:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <vel_sample_count>
		set_calibrate_led(LOW);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <set_calibrate_led>
	}
	
	// Set calibrated indicator once enough samples have been read
	if( vel_sample_count >= v_calibrate_samples){
     80e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel_sample_count>
     812:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <vel_sample_count+0x1>
     816:	84 3f       	cpi	r24, 0xF4	; 244
     818:	91 40       	sbci	r25, 0x01	; 1
     81a:	18 f0       	brcs	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		set_calibrate_led(HIGH);
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <set_calibrate_led>
	}
	
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	08 95       	ret

00000838 <velocity_mode_start>:

int velocity_mode_start(void){
	set_calibrate_led(LOW);
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <set_calibrate_led>
	vel_sample_count = 0;
     83e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <vel_sample_count+0x1>
     842:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <vel_sample_count>
	vel_accumulated_blv = 0;
     846:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <vel_accumulated_blv>
     84a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <vel_accumulated_blv+0x1>
     84e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <vel_accumulated_blv+0x2>
     852:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <vel_accumulated_blv+0x3>
	last_pos = 0;
     856:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <last_pos+0x1>
     85a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <last_pos>
	set_period_timer1(v_period);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 24 05 	call	0xa48	; 0xa48 <set_period_timer1>
	set_callback_timer1(velocity_update);
     866:	8d e9       	ldi	r24, 0x9D	; 157
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	0e 94 38 05 	call	0xa70	; 0xa70 <set_callback_timer1>
	set_period_dac(dac_period);
     86e:	88 ee       	ldi	r24, 0xE8	; 232
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_period_dac>
	start_dac();
     876:	0e 94 9b 01 	call	0x336	; 0x336 <start_dac>
	return 0;
}
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	08 95       	ret

00000880 <velocity_mode_stop>:

int velocity_mode_stop(void){
	stop_timer1();
     880:	0e 94 3d 05 	call	0xa7a	; 0xa7a <stop_timer1>
	stop_dac();
     884:	0e 94 a4 01 	call	0x348	; 0x348 <stop_dac>
	return 0;
}
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	08 95       	ret

0000088e <calculate_mass>:
 *-----------------------------------------------------------------*/
static volatile u8 duty_cycle = 0;
static volatile double mass = 0;

double calculate_mass(double current, double blv){
	return (current * blv ) / g;
     88e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     892:	23 ec       	ldi	r18, 0xC3	; 195
     894:	35 ef       	ldi	r19, 0xF5	; 245
     896:	4c e1       	ldi	r20, 0x1C	; 28
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
}
     89e:	08 95       	ret

000008a0 <force_update>:

void force_update(void){
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
	i16 pos = get_position();
     8a8:	0e 94 21 05 	call	0xa42	; 0xa42 <get_position>
	if(abs(pos) <= pos_error){
     8ac:	99 23       	and	r25, r25
     8ae:	1c f4       	brge	.+6      	; 0x8b6 <force_update+0x16>
     8b0:	91 95       	neg	r25
     8b2:	81 95       	neg	r24
     8b4:	91 09       	sbc	r25, r1
     8b6:	85 36       	cpi	r24, 0x65	; 101
     8b8:	91 05       	cpc	r25, r1
     8ba:	b0 f5       	brcc	.+108    	; 0x928 <__stack+0x29>
		if(vel_sample_count <= 1) return;
     8bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <vel_sample_count>
     8c0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <vel_sample_count+0x1>
     8c4:	02 97       	sbiw	r24, 0x02	; 2
     8c6:	a8 f1       	brcs	.+106    	; 0x932 <__stack+0x33>
		double blv = vel_accumulated_blv / vel_sample_count;
     8c8:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <vel_accumulated_blv>
     8cc:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <vel_accumulated_blv+0x1>
     8d0:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <vel_accumulated_blv+0x2>
     8d4:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <vel_accumulated_blv+0x3>
     8d8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <vel_sample_count>
     8dc:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <vel_sample_count+0x1>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatunsisf>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     8f4:	6b 01       	movw	r12, r22
     8f6:	7c 01       	movw	r14, r24
		mass = calculate_mass(get_current_coila(), blv);
     8f8:	0e 94 00 05 	call	0xa00	; 0xa00 <get_current_coila>
     8fc:	a7 01       	movw	r20, r14
     8fe:	96 01       	movw	r18, r12
     900:	0e 94 47 04 	call	0x88e	; 0x88e <calculate_mass>
     904:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <mass>
     908:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <mass+0x1>
     90c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mass+0x2>
     910:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mass+0x3>
		set_value_display(mass);
     914:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <mass>
     918:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <mass+0x1>
     91c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mass+0x2>
     920:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <mass+0x3>
     924:	0e 94 c5 01 	call	0x38a	; 0x38a <set_value_display>
	}
	
	u16 duty_cycle_new = duty_cycle + (cycle_param * pos);
     928:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <duty_cycle>
	
	set_pwm(duty_cycle_new);
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 36 02 	call	0x46c	; 0x46c <set_pwm>
}
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	08 95       	ret

0000093c <force_mode_start>:

int force_mode_start(void){
	start_pwm(); // Enable the PWM output of the h-bridge.
     93c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <start_pwm>
	set_period_timer1(f_period);
     940:	85 e0       	ldi	r24, 0x05	; 5
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 24 05 	call	0xa48	; 0xa48 <set_period_timer1>
	set_callback_timer1(force_update);
     948:	80 e5       	ldi	r24, 0x50	; 80
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	0e 94 38 05 	call	0xa70	; 0xa70 <set_callback_timer1>
	return 0;
}
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	08 95       	ret

00000956 <force_mode_stop>:

int force_mode_stop(void){
	stop_timer1();
     956:	0e 94 3d 05 	call	0xa7a	; 0xa7a <stop_timer1>
	stop_pwm();
     95a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <stop_pwm>
	return 0;
}
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	08 95       	ret

00000964 <update_mode>:
 * Switching Function
 *-----------------------------------------------------------------*/

void update_mode(){
	// Check if mode has been updated in last 10ms
	if(get_switch()){
     964:	0e 94 99 02 	call	0x532	; 0x532 <get_switch>
     968:	88 23       	and	r24, r24
     96a:	29 f0       	breq	.+10     	; 0x976 <update_mode+0x12>
		velocity_mode_stop();
     96c:	0e 94 40 04 	call	0x880	; 0x880 <velocity_mode_stop>
		force_mode_start();
     970:	0e 94 9e 04 	call	0x93c	; 0x93c <force_mode_start>
     974:	08 95       	ret
	}
	else{
		force_mode_stop();
     976:	0e 94 ab 04 	call	0x956	; 0x956 <force_mode_stop>
		velocity_mode_start();
     97a:	0e 94 1c 04 	call	0x838	; 0x838 <velocity_mode_start>
     97e:	08 95       	ret

00000980 <main>:
 *-----------------------------------------------------------------*/

int main(void)
{
	//Boot Up
	init_adc();
     980:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <init_adc>
	init_dac(SAMPLES_PER_CYCLE);
     984:	84 e6       	ldi	r24, 0x64	; 100
     986:	0e 94 ab 01 	call	0x356	; 0x356 <init_dac>
	init_display();
     98a:	0e 94 ba 01 	call	0x374	; 0x374 <init_display>
	init_hb();
     98e:	0e 94 46 02 	call	0x48c	; 0x48c <init_hb>
	init_spi_he();
     992:	0e 94 a1 02 	call	0x542	; 0x542 <init_spi_he>
	init_led();
     996:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <init_led>
	init_switch();
     99a:	0e 94 87 02 	call	0x50e	; 0x50e <init_switch>
	init_uart(BAUD);
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	95 e2       	ldi	r25, 0x25	; 37
     9a2:	0e 94 a2 02 	call	0x544	; 0x544 <init_uart>
	
	set_boot_led(HIGH);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <set_boot_led>
	set_calibrate_led(LOW);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <set_calibrate_led>
	
	while (1)
	{
		update_mode();
     9b2:	0e 94 b2 04 	call	0x964	; 0x964 <update_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b6:	2f ef       	ldi	r18, 0xFF	; 255
     9b8:	81 ee       	ldi	r24, 0xE1	; 225
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	80 40       	sbci	r24, 0x00	; 0
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <main+0x3c>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <main+0x46>
     9c6:	00 00       	nop
     9c8:	f4 cf       	rjmp	.-24     	; 0x9b2 <main+0x32>

000009ca <get_voltage_coila>:

double get_voltage_coilb(void){
	u16 adc_val = read_adc(COIL_B_ADC);
	double voltage = (((double)adc_val * V_REF)/ 1024.0)  - V_BIAS_B;
	return voltage;
}
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <read_adc>
     9d0:	bc 01       	movw	r22, r24
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatunsisf>
     9da:	23 e3       	ldi	r18, 0x33	; 51
     9dc:	33 e3       	ldi	r19, 0x33	; 51
     9de:	43 e5       	ldi	r20, 0x53	; 83
     9e0:	50 e4       	ldi	r21, 0x40	; 64
     9e2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e8       	ldi	r20, 0x80	; 128
     9ec:	5a e3       	ldi	r21, 0x3A	; 58
     9ee:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     9f2:	23 e3       	ldi	r18, 0x33	; 51
     9f4:	33 e3       	ldi	r19, 0x33	; 51
     9f6:	43 ed       	ldi	r20, 0xD3	; 211
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	0e 94 3a 06 	call	0xc74	; 0xc74 <__subsf3>
     9fe:	08 95       	ret

00000a00 <get_current_coila>:

double get_current_coila(void){
	u16 adc_val = read_adc(CURRENT_ADC);
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <read_adc>
	double current = ((((double)adc_val * V_REF)/ 1024.0)  - V_ZERO_CURRENT) / V_CURRENT_SENS; //(Volts - 1.5) / (V/A)
     a06:	bc 01       	movw	r22, r24
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatunsisf>
     a10:	23 e3       	ldi	r18, 0x33	; 51
     a12:	33 e3       	ldi	r19, 0x33	; 51
     a14:	43 e5       	ldi	r20, 0x53	; 83
     a16:	50 e4       	ldi	r21, 0x40	; 64
     a18:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e8       	ldi	r20, 0x80	; 128
     a22:	5a e3       	ldi	r21, 0x3A	; 58
     a24:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 ec       	ldi	r20, 0xC0	; 192
     a2e:	5f e3       	ldi	r21, 0x3F	; 63
     a30:	0e 94 3a 06 	call	0xc74	; 0xc74 <__subsf3>
     a34:	2d ec       	ldi	r18, 0xCD	; 205
     a36:	3c ec       	ldi	r19, 0xCC	; 204
     a38:	4c ec       	ldi	r20, 0xCC	; 204
     a3a:	5e e3       	ldi	r21, 0x3E	; 62
     a3c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
	return current;
}
     a40:	08 95       	ret

00000a42 <get_position>:

i16 get_position(void){
	return 0;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	08 95       	ret

00000a48 <set_period_timer1>:
void set_period_timer3(uint16_t period_ms) {
	OCR3A = (F_CPU / 64) * period_ms / 1000 - 1;
}

void set_callback_timer3(TimerCallback callback) {
	timer3_function = callback;
     a48:	dc 01       	movw	r26, r24
     a4a:	20 e9       	ldi	r18, 0x90	; 144
     a4c:	30 ed       	ldi	r19, 0xD0	; 208
     a4e:	43 e0       	ldi	r20, 0x03	; 3
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__muluhisi3>
     a56:	28 ee       	ldi	r18, 0xE8	; 232
     a58:	33 e0       	ldi	r19, 0x03	; 3
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodsi4>
     a62:	21 50       	subi	r18, 0x01	; 1
     a64:	31 09       	sbc	r19, r1
     a66:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a6a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     a6e:	08 95       	ret

00000a70 <set_callback_timer1>:
     a70:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer1_function+0x1>
     a74:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer1_function>
     a78:	08 95       	ret

00000a7a <stop_timer1>:
     a7a:	e1 e8       	ldi	r30, 0x81	; 129
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	8c 7f       	andi	r24, 0xFC	; 252
     a82:	80 83       	st	Z, r24
     a84:	08 95       	ret

00000a86 <__vector_11>:
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timer1_function>
     aac:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timer1_function+0x1>
     ab0:	89 2b       	or	r24, r25
     ab2:	29 f0       	breq	.+10     	; 0xabe <__vector_11+0x38>
     ab4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <timer1_function>
     ab8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <timer1_function+0x1>
     abc:	09 95       	icall
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <init_timer2>:
     ae0:	dc 01       	movw	r26, r24
     ae2:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <timer2_function+0x1>
     ae6:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <timer2_function>
     aea:	e0 eb       	ldi	r30, 0xB0	; 176
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	90 81       	ld	r25, Z
     af0:	92 60       	ori	r25, 0x02	; 2
     af2:	90 83       	st	Z, r25
     af4:	e0 e7       	ldi	r30, 0x70	; 112
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	90 81       	ld	r25, Z
     afa:	92 60       	ori	r25, 0x02	; 2
     afc:	90 83       	st	Z, r25
     afe:	20 e9       	ldi	r18, 0x90	; 144
     b00:	30 ed       	ldi	r19, 0xD0	; 208
     b02:	43 e0       	ldi	r20, 0x03	; 3
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__muluhisi3>
     b0a:	28 ee       	ldi	r18, 0xE8	; 232
     b0c:	33 e0       	ldi	r19, 0x03	; 3
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodsi4>
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b1c:	e1 eb       	ldi	r30, 0xB1	; 177
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	83 60       	ori	r24, 0x03	; 3
     b24:	80 83       	st	Z, r24
     b26:	78 94       	sei
     b28:	08 95       	ret

00000b2a <stop_timer2>:
     b2a:	e1 eb       	ldi	r30, 0xB1	; 177
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	8c 7f       	andi	r24, 0xFC	; 252
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret

00000b36 <__vector_7>:
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer2_function>
     b5c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer2_function+0x1>
     b60:	89 2b       	or	r24, r25
     b62:	29 f0       	breq	.+10     	; 0xb6e <__vector_7+0x38>
     b64:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <timer2_function>
     b68:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <timer2_function+0x1>
     b6c:	09 95       	icall
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <init_timer3>:
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	dc 01       	movw	r26, r24
     b96:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <timer3_function+0x1>
     b9a:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <timer3_function>
     b9e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     ba2:	c1 e9       	ldi	r28, 0x91	; 145
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
     ba6:	88 e0       	ldi	r24, 0x08	; 8
     ba8:	88 83       	st	Y, r24
     baa:	e1 e7       	ldi	r30, 0x71	; 113
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	90 81       	ld	r25, Z
     bb0:	92 60       	ori	r25, 0x02	; 2
     bb2:	90 83       	st	Z, r25
     bb4:	20 e9       	ldi	r18, 0x90	; 144
     bb6:	30 ed       	ldi	r19, 0xD0	; 208
     bb8:	43 e0       	ldi	r20, 0x03	; 3
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__muluhisi3>
     bc0:	28 ee       	ldi	r18, 0xE8	; 232
     bc2:	33 e0       	ldi	r19, 0x03	; 3
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodsi4>
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	31 09       	sbc	r19, r1
     bd0:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     bd4:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
     bd8:	88 81       	ld	r24, Y
     bda:	83 60       	ori	r24, 0x03	; 3
     bdc:	88 83       	st	Y, r24
     bde:	78 94       	sei
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <set_period_timer3>:
     be6:	dc 01       	movw	r26, r24
     be8:	20 e9       	ldi	r18, 0x90	; 144
     bea:	30 ed       	ldi	r19, 0xD0	; 208
     bec:	43 e0       	ldi	r20, 0x03	; 3
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__muluhisi3>
     bf4:	28 ee       	ldi	r18, 0xE8	; 232
     bf6:	33 e0       	ldi	r19, 0x03	; 3
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodsi4>
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	31 09       	sbc	r19, r1
     c04:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     c08:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
     c0c:	08 95       	ret

00000c0e <stop_timer3>:
}

void stop_timer3(void){
	TCCR3B &= ~((1 << CS31) | (1 << CS30)); 
     c0e:	e1 e9       	ldi	r30, 0x91	; 145
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8c 7f       	andi	r24, 0xFC	; 252
     c16:	80 83       	st	Z, r24
     c18:	08 95       	ret

00000c1a <__vector_33>:
}

ISR(TIMER3_COMPA_vect) {
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	2f 93       	push	r18
     c26:	3f 93       	push	r19
     c28:	4f 93       	push	r20
     c2a:	5f 93       	push	r21
     c2c:	6f 93       	push	r22
     c2e:	7f 93       	push	r23
     c30:	8f 93       	push	r24
     c32:	9f 93       	push	r25
     c34:	af 93       	push	r26
     c36:	bf 93       	push	r27
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
	if (timer3_function != NULL) {
     c3c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer3_function>
     c40:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer3_function+0x1>
     c44:	89 2b       	or	r24, r25
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_33+0x38>
		timer3_function();
     c48:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <timer3_function>
     c4c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <timer3_function+0x1>
     c50:	09 95       	icall
	}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__subsf3>:
     c74:	50 58       	subi	r21, 0x80	; 128

00000c76 <__addsf3>:
     c76:	bb 27       	eor	r27, r27
     c78:	aa 27       	eor	r26, r26
     c7a:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3x>
     c7e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_round>
     c82:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fp_pscA>
     c86:	38 f0       	brcs	.+14     	; 0xc96 <__addsf3+0x20>
     c88:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fp_pscB>
     c8c:	20 f0       	brcs	.+8      	; 0xc96 <__addsf3+0x20>
     c8e:	39 f4       	brne	.+14     	; 0xc9e <__addsf3+0x28>
     c90:	9f 3f       	cpi	r25, 0xFF	; 255
     c92:	19 f4       	brne	.+6      	; 0xc9a <__addsf3+0x24>
     c94:	26 f4       	brtc	.+8      	; 0xc9e <__addsf3+0x28>
     c96:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_nan>
     c9a:	0e f4       	brtc	.+2      	; 0xc9e <__addsf3+0x28>
     c9c:	e0 95       	com	r30
     c9e:	e7 fb       	bst	r30, 7
     ca0:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_inf>

00000ca4 <__addsf3x>:
     ca4:	e9 2f       	mov	r30, r25
     ca6:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_split3>
     caa:	58 f3       	brcs	.-42     	; 0xc82 <__addsf3+0xc>
     cac:	ba 17       	cp	r27, r26
     cae:	62 07       	cpc	r22, r18
     cb0:	73 07       	cpc	r23, r19
     cb2:	84 07       	cpc	r24, r20
     cb4:	95 07       	cpc	r25, r21
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__addsf3x+0x1c>
     cb8:	79 f4       	brne	.+30     	; 0xcd8 <__addsf3x+0x34>
     cba:	a6 f5       	brtc	.+104    	; 0xd24 <__addsf3x+0x80>
     cbc:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_zero>
     cc0:	0e f4       	brtc	.+2      	; 0xcc4 <__addsf3x+0x20>
     cc2:	e0 95       	com	r30
     cc4:	0b 2e       	mov	r0, r27
     cc6:	ba 2f       	mov	r27, r26
     cc8:	a0 2d       	mov	r26, r0
     cca:	0b 01       	movw	r0, r22
     ccc:	b9 01       	movw	r22, r18
     cce:	90 01       	movw	r18, r0
     cd0:	0c 01       	movw	r0, r24
     cd2:	ca 01       	movw	r24, r20
     cd4:	a0 01       	movw	r20, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	ff 27       	eor	r31, r31
     cda:	59 1b       	sub	r21, r25
     cdc:	99 f0       	breq	.+38     	; 0xd04 <__addsf3x+0x60>
     cde:	59 3f       	cpi	r21, 0xF9	; 249
     ce0:	50 f4       	brcc	.+20     	; 0xcf6 <__addsf3x+0x52>
     ce2:	50 3e       	cpi	r21, 0xE0	; 224
     ce4:	68 f1       	brcs	.+90     	; 0xd40 <__addsf3x+0x9c>
     ce6:	1a 16       	cp	r1, r26
     ce8:	f0 40       	sbci	r31, 0x00	; 0
     cea:	a2 2f       	mov	r26, r18
     cec:	23 2f       	mov	r18, r19
     cee:	34 2f       	mov	r19, r20
     cf0:	44 27       	eor	r20, r20
     cf2:	58 5f       	subi	r21, 0xF8	; 248
     cf4:	f3 cf       	rjmp	.-26     	; 0xcdc <__addsf3x+0x38>
     cf6:	46 95       	lsr	r20
     cf8:	37 95       	ror	r19
     cfa:	27 95       	ror	r18
     cfc:	a7 95       	ror	r26
     cfe:	f0 40       	sbci	r31, 0x00	; 0
     d00:	53 95       	inc	r21
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__addsf3x+0x52>
     d04:	7e f4       	brtc	.+30     	; 0xd24 <__addsf3x+0x80>
     d06:	1f 16       	cp	r1, r31
     d08:	ba 0b       	sbc	r27, r26
     d0a:	62 0b       	sbc	r22, r18
     d0c:	73 0b       	sbc	r23, r19
     d0e:	84 0b       	sbc	r24, r20
     d10:	ba f0       	brmi	.+46     	; 0xd40 <__addsf3x+0x9c>
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	a1 f0       	breq	.+40     	; 0xd3e <__addsf3x+0x9a>
     d16:	ff 0f       	add	r31, r31
     d18:	bb 1f       	adc	r27, r27
     d1a:	66 1f       	adc	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	c2 f7       	brpl	.-16     	; 0xd12 <__addsf3x+0x6e>
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <__addsf3x+0x9c>
     d24:	ba 0f       	add	r27, r26
     d26:	62 1f       	adc	r22, r18
     d28:	73 1f       	adc	r23, r19
     d2a:	84 1f       	adc	r24, r20
     d2c:	48 f4       	brcc	.+18     	; 0xd40 <__addsf3x+0x9c>
     d2e:	87 95       	ror	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f7 95       	ror	r31
     d38:	9e 3f       	cpi	r25, 0xFE	; 254
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__addsf3x+0x9a>
     d3c:	b0 cf       	rjmp	.-160    	; 0xc9e <__addsf3+0x28>
     d3e:	93 95       	inc	r25
     d40:	88 0f       	add	r24, r24
     d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0xa2>
     d44:	99 27       	eor	r25, r25
     d46:	ee 0f       	add	r30, r30
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	08 95       	ret

00000d4e <__divsf3>:
     d4e:	0e 94 bb 06 	call	0xd76	; 0xd76 <__divsf3x>
     d52:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_round>
     d56:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fp_pscB>
     d5a:	58 f0       	brcs	.+22     	; 0xd72 <__divsf3+0x24>
     d5c:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fp_pscA>
     d60:	40 f0       	brcs	.+16     	; 0xd72 <__divsf3+0x24>
     d62:	29 f4       	brne	.+10     	; 0xd6e <__divsf3+0x20>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	29 f0       	breq	.+10     	; 0xd72 <__divsf3+0x24>
     d68:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_inf>
     d6c:	51 11       	cpse	r21, r1
     d6e:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_szero>
     d72:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_nan>

00000d76 <__divsf3x>:
     d76:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_split3>
     d7a:	68 f3       	brcs	.-38     	; 0xd56 <__divsf3+0x8>

00000d7c <__divsf3_pse>:
     d7c:	99 23       	and	r25, r25
     d7e:	b1 f3       	breq	.-20     	; 0xd6c <__divsf3+0x1e>
     d80:	55 23       	and	r21, r21
     d82:	91 f3       	breq	.-28     	; 0xd68 <__divsf3+0x1a>
     d84:	95 1b       	sub	r25, r21
     d86:	55 0b       	sbc	r21, r21
     d88:	bb 27       	eor	r27, r27
     d8a:	aa 27       	eor	r26, r26
     d8c:	62 17       	cp	r22, r18
     d8e:	73 07       	cpc	r23, r19
     d90:	84 07       	cpc	r24, r20
     d92:	38 f0       	brcs	.+14     	; 0xda2 <__divsf3_pse+0x26>
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	44 1f       	adc	r20, r20
     d9e:	aa 1f       	adc	r26, r26
     da0:	a9 f3       	breq	.-22     	; 0xd8c <__divsf3_pse+0x10>
     da2:	35 d0       	rcall	.+106    	; 0xe0e <__divsf3_pse+0x92>
     da4:	0e 2e       	mov	r0, r30
     da6:	3a f0       	brmi	.+14     	; 0xdb6 <__divsf3_pse+0x3a>
     da8:	e0 e8       	ldi	r30, 0x80	; 128
     daa:	32 d0       	rcall	.+100    	; 0xe10 <__divsf3_pse+0x94>
     dac:	91 50       	subi	r25, 0x01	; 1
     dae:	50 40       	sbci	r21, 0x00	; 0
     db0:	e6 95       	lsr	r30
     db2:	00 1c       	adc	r0, r0
     db4:	ca f7       	brpl	.-14     	; 0xda8 <__divsf3_pse+0x2c>
     db6:	2b d0       	rcall	.+86     	; 0xe0e <__divsf3_pse+0x92>
     db8:	fe 2f       	mov	r31, r30
     dba:	29 d0       	rcall	.+82     	; 0xe0e <__divsf3_pse+0x92>
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	bb 1f       	adc	r27, r27
     dc4:	26 17       	cp	r18, r22
     dc6:	37 07       	cpc	r19, r23
     dc8:	48 07       	cpc	r20, r24
     dca:	ab 07       	cpc	r26, r27
     dcc:	b0 e8       	ldi	r27, 0x80	; 128
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__divsf3_pse+0x56>
     dd0:	bb 0b       	sbc	r27, r27
     dd2:	80 2d       	mov	r24, r0
     dd4:	bf 01       	movw	r22, r30
     dd6:	ff 27       	eor	r31, r31
     dd8:	93 58       	subi	r25, 0x83	; 131
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	3a f0       	brmi	.+14     	; 0xdec <__divsf3_pse+0x70>
     dde:	9e 3f       	cpi	r25, 0xFE	; 254
     de0:	51 05       	cpc	r21, r1
     de2:	78 f0       	brcs	.+30     	; 0xe02 <__divsf3_pse+0x86>
     de4:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_inf>
     de8:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_szero>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	e4 f3       	brlt	.-8      	; 0xde8 <__divsf3_pse+0x6c>
     df0:	98 3e       	cpi	r25, 0xE8	; 232
     df2:	d4 f3       	brlt	.-12     	; 0xde8 <__divsf3_pse+0x6c>
     df4:	86 95       	lsr	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f7 95       	ror	r31
     dfe:	9f 5f       	subi	r25, 0xFF	; 255
     e00:	c9 f7       	brne	.-14     	; 0xdf4 <__divsf3_pse+0x78>
     e02:	88 0f       	add	r24, r24
     e04:	91 1d       	adc	r25, r1
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret
     e0e:	e1 e0       	ldi	r30, 0x01	; 1
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	bb 1f       	adc	r27, r27
     e18:	62 17       	cp	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	ba 07       	cpc	r27, r26
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__divsf3_pse+0xae>
     e22:	62 1b       	sub	r22, r18
     e24:	73 0b       	sbc	r23, r19
     e26:	84 0b       	sbc	r24, r20
     e28:	ba 0b       	sbc	r27, r26
     e2a:	ee 1f       	adc	r30, r30
     e2c:	88 f7       	brcc	.-30     	; 0xe10 <__divsf3_pse+0x94>
     e2e:	e0 95       	com	r30
     e30:	08 95       	ret

00000e32 <__fixsfsi>:
     e32:	0e 94 20 07 	call	0xe40	; 0xe40 <__fixunssfsi>
     e36:	68 94       	set
     e38:	b1 11       	cpse	r27, r1
     e3a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_szero>
     e3e:	08 95       	ret

00000e40 <__fixunssfsi>:
     e40:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_splitA>
     e44:	88 f0       	brcs	.+34     	; 0xe68 <__fixunssfsi+0x28>
     e46:	9f 57       	subi	r25, 0x7F	; 127
     e48:	98 f0       	brcs	.+38     	; 0xe70 <__fixunssfsi+0x30>
     e4a:	b9 2f       	mov	r27, r25
     e4c:	99 27       	eor	r25, r25
     e4e:	b7 51       	subi	r27, 0x17	; 23
     e50:	b0 f0       	brcs	.+44     	; 0xe7e <__fixunssfsi+0x3e>
     e52:	e1 f0       	breq	.+56     	; 0xe8c <__fixunssfsi+0x4c>
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	1a f0       	brmi	.+6      	; 0xe64 <__fixunssfsi+0x24>
     e5e:	ba 95       	dec	r27
     e60:	c9 f7       	brne	.-14     	; 0xe54 <__fixunssfsi+0x14>
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__fixunssfsi+0x4c>
     e64:	b1 30       	cpi	r27, 0x01	; 1
     e66:	91 f0       	breq	.+36     	; 0xe8c <__fixunssfsi+0x4c>
     e68:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_zero>
     e6c:	b1 e0       	ldi	r27, 0x01	; 1
     e6e:	08 95       	ret
     e70:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_zero>
     e74:	67 2f       	mov	r22, r23
     e76:	78 2f       	mov	r23, r24
     e78:	88 27       	eor	r24, r24
     e7a:	b8 5f       	subi	r27, 0xF8	; 248
     e7c:	39 f0       	breq	.+14     	; 0xe8c <__fixunssfsi+0x4c>
     e7e:	b9 3f       	cpi	r27, 0xF9	; 249
     e80:	cc f3       	brlt	.-14     	; 0xe74 <__fixunssfsi+0x34>
     e82:	86 95       	lsr	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b3 95       	inc	r27
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <__fixunssfsi+0x42>
     e8c:	3e f4       	brtc	.+14     	; 0xe9c <__fixunssfsi+0x5c>
     e8e:	90 95       	com	r25
     e90:	80 95       	com	r24
     e92:	70 95       	com	r23
     e94:	61 95       	neg	r22
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	08 95       	ret

00000e9e <__floatunsisf>:
     e9e:	e8 94       	clt
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <__floatsisf+0x12>

00000ea2 <__floatsisf>:
     ea2:	97 fb       	bst	r25, 7
     ea4:	3e f4       	brtc	.+14     	; 0xeb4 <__floatsisf+0x12>
     ea6:	90 95       	com	r25
     ea8:	80 95       	com	r24
     eaa:	70 95       	com	r23
     eac:	61 95       	neg	r22
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	99 23       	and	r25, r25
     eb6:	a9 f0       	breq	.+42     	; 0xee2 <__floatsisf+0x40>
     eb8:	f9 2f       	mov	r31, r25
     eba:	96 e9       	ldi	r25, 0x96	; 150
     ebc:	bb 27       	eor	r27, r27
     ebe:	93 95       	inc	r25
     ec0:	f6 95       	lsr	r31
     ec2:	87 95       	ror	r24
     ec4:	77 95       	ror	r23
     ec6:	67 95       	ror	r22
     ec8:	b7 95       	ror	r27
     eca:	f1 11       	cpse	r31, r1
     ecc:	f8 cf       	rjmp	.-16     	; 0xebe <__floatsisf+0x1c>
     ece:	fa f4       	brpl	.+62     	; 0xf0e <__floatsisf+0x6c>
     ed0:	bb 0f       	add	r27, r27
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__floatsisf+0x36>
     ed4:	60 ff       	sbrs	r22, 0
     ed6:	1b c0       	rjmp	.+54     	; 0xf0e <__floatsisf+0x6c>
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	16 c0       	rjmp	.+44     	; 0xf0e <__floatsisf+0x6c>
     ee2:	88 23       	and	r24, r24
     ee4:	11 f0       	breq	.+4      	; 0xeea <__floatsisf+0x48>
     ee6:	96 e9       	ldi	r25, 0x96	; 150
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <__floatsisf+0x6a>
     eea:	77 23       	and	r23, r23
     eec:	21 f0       	breq	.+8      	; 0xef6 <__floatsisf+0x54>
     eee:	9e e8       	ldi	r25, 0x8E	; 142
     ef0:	87 2f       	mov	r24, r23
     ef2:	76 2f       	mov	r23, r22
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <__floatsisf+0x5e>
     ef6:	66 23       	and	r22, r22
     ef8:	71 f0       	breq	.+28     	; 0xf16 <__floatsisf+0x74>
     efa:	96 e8       	ldi	r25, 0x86	; 134
     efc:	86 2f       	mov	r24, r22
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	2a f0       	brmi	.+10     	; 0xf0e <__floatsisf+0x6c>
     f04:	9a 95       	dec	r25
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	da f7       	brpl	.-10     	; 0xf04 <__floatsisf+0x62>
     f0e:	88 0f       	add	r24, r24
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	97 f9       	bld	r25, 7
     f16:	08 95       	ret

00000f18 <__fp_inf>:
     f18:	97 f9       	bld	r25, 7
     f1a:	9f 67       	ori	r25, 0x7F	; 127
     f1c:	80 e8       	ldi	r24, 0x80	; 128
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	08 95       	ret

00000f24 <__fp_nan>:
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	80 ec       	ldi	r24, 0xC0	; 192
     f28:	08 95       	ret

00000f2a <__fp_pscA>:
     f2a:	00 24       	eor	r0, r0
     f2c:	0a 94       	dec	r0
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	09 06       	cpc	r0, r25
     f36:	08 95       	ret

00000f38 <__fp_pscB>:
     f38:	00 24       	eor	r0, r0
     f3a:	0a 94       	dec	r0
     f3c:	12 16       	cp	r1, r18
     f3e:	13 06       	cpc	r1, r19
     f40:	14 06       	cpc	r1, r20
     f42:	05 06       	cpc	r0, r21
     f44:	08 95       	ret

00000f46 <__fp_round>:
     f46:	09 2e       	mov	r0, r25
     f48:	03 94       	inc	r0
     f4a:	00 0c       	add	r0, r0
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_round+0xc>
     f4e:	88 23       	and	r24, r24
     f50:	52 f0       	brmi	.+20     	; 0xf66 <__fp_round+0x20>
     f52:	bb 0f       	add	r27, r27
     f54:	40 f4       	brcc	.+16     	; 0xf66 <__fp_round+0x20>
     f56:	bf 2b       	or	r27, r31
     f58:	11 f4       	brne	.+4      	; 0xf5e <__fp_round+0x18>
     f5a:	60 ff       	sbrs	r22, 0
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <__fp_round+0x20>
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	08 95       	ret

00000f68 <__fp_split3>:
     f68:	57 fd       	sbrc	r21, 7
     f6a:	90 58       	subi	r25, 0x80	; 128
     f6c:	44 0f       	add	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	59 f0       	breq	.+22     	; 0xf88 <__fp_splitA+0x10>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	71 f0       	breq	.+28     	; 0xf92 <__fp_splitA+0x1a>
     f76:	47 95       	ror	r20

00000f78 <__fp_splitA>:
     f78:	88 0f       	add	r24, r24
     f7a:	97 fb       	bst	r25, 7
     f7c:	99 1f       	adc	r25, r25
     f7e:	61 f0       	breq	.+24     	; 0xf98 <__fp_splitA+0x20>
     f80:	9f 3f       	cpi	r25, 0xFF	; 255
     f82:	79 f0       	breq	.+30     	; 0xfa2 <__fp_splitA+0x2a>
     f84:	87 95       	ror	r24
     f86:	08 95       	ret
     f88:	12 16       	cp	r1, r18
     f8a:	13 06       	cpc	r1, r19
     f8c:	14 06       	cpc	r1, r20
     f8e:	55 1f       	adc	r21, r21
     f90:	f2 cf       	rjmp	.-28     	; 0xf76 <__fp_split3+0xe>
     f92:	46 95       	lsr	r20
     f94:	f1 df       	rcall	.-30     	; 0xf78 <__fp_splitA>
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <__fp_splitA+0x30>
     f98:	16 16       	cp	r1, r22
     f9a:	17 06       	cpc	r1, r23
     f9c:	18 06       	cpc	r1, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	f1 cf       	rjmp	.-30     	; 0xf84 <__fp_splitA+0xc>
     fa2:	86 95       	lsr	r24
     fa4:	71 05       	cpc	r23, r1
     fa6:	61 05       	cpc	r22, r1
     fa8:	08 94       	sec
     faa:	08 95       	ret

00000fac <__fp_zero>:
     fac:	e8 94       	clt

00000fae <__fp_szero>:
     fae:	bb 27       	eor	r27, r27
     fb0:	66 27       	eor	r22, r22
     fb2:	77 27       	eor	r23, r23
     fb4:	cb 01       	movw	r24, r22
     fb6:	97 f9       	bld	r25, 7
     fb8:	08 95       	ret

00000fba <__gesf2>:
     fba:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fp_cmp>
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <__gesf2+0x8>
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	08 95       	ret

00000fc4 <__mulsf3>:
     fc4:	0e 94 f5 07 	call	0xfea	; 0xfea <__mulsf3x>
     fc8:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_round>
     fcc:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fp_pscA>
     fd0:	38 f0       	brcs	.+14     	; 0xfe0 <__mulsf3+0x1c>
     fd2:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fp_pscB>
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <__mulsf3+0x1c>
     fd8:	95 23       	and	r25, r21
     fda:	11 f0       	breq	.+4      	; 0xfe0 <__mulsf3+0x1c>
     fdc:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_inf>
     fe0:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_nan>
     fe4:	11 24       	eor	r1, r1
     fe6:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_szero>

00000fea <__mulsf3x>:
     fea:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_split3>
     fee:	70 f3       	brcs	.-36     	; 0xfcc <__mulsf3+0x8>

00000ff0 <__mulsf3_pse>:
     ff0:	95 9f       	mul	r25, r21
     ff2:	c1 f3       	breq	.-16     	; 0xfe4 <__mulsf3+0x20>
     ff4:	95 0f       	add	r25, r21
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	55 1f       	adc	r21, r21
     ffa:	62 9f       	mul	r22, r18
     ffc:	f0 01       	movw	r30, r0
     ffe:	72 9f       	mul	r23, r18
    1000:	bb 27       	eor	r27, r27
    1002:	f0 0d       	add	r31, r0
    1004:	b1 1d       	adc	r27, r1
    1006:	63 9f       	mul	r22, r19
    1008:	aa 27       	eor	r26, r26
    100a:	f0 0d       	add	r31, r0
    100c:	b1 1d       	adc	r27, r1
    100e:	aa 1f       	adc	r26, r26
    1010:	64 9f       	mul	r22, r20
    1012:	66 27       	eor	r22, r22
    1014:	b0 0d       	add	r27, r0
    1016:	a1 1d       	adc	r26, r1
    1018:	66 1f       	adc	r22, r22
    101a:	82 9f       	mul	r24, r18
    101c:	22 27       	eor	r18, r18
    101e:	b0 0d       	add	r27, r0
    1020:	a1 1d       	adc	r26, r1
    1022:	62 1f       	adc	r22, r18
    1024:	73 9f       	mul	r23, r19
    1026:	b0 0d       	add	r27, r0
    1028:	a1 1d       	adc	r26, r1
    102a:	62 1f       	adc	r22, r18
    102c:	83 9f       	mul	r24, r19
    102e:	a0 0d       	add	r26, r0
    1030:	61 1d       	adc	r22, r1
    1032:	22 1f       	adc	r18, r18
    1034:	74 9f       	mul	r23, r20
    1036:	33 27       	eor	r19, r19
    1038:	a0 0d       	add	r26, r0
    103a:	61 1d       	adc	r22, r1
    103c:	23 1f       	adc	r18, r19
    103e:	84 9f       	mul	r24, r20
    1040:	60 0d       	add	r22, r0
    1042:	21 1d       	adc	r18, r1
    1044:	82 2f       	mov	r24, r18
    1046:	76 2f       	mov	r23, r22
    1048:	6a 2f       	mov	r22, r26
    104a:	11 24       	eor	r1, r1
    104c:	9f 57       	subi	r25, 0x7F	; 127
    104e:	50 40       	sbci	r21, 0x00	; 0
    1050:	9a f0       	brmi	.+38     	; 0x1078 <__mulsf3_pse+0x88>
    1052:	f1 f0       	breq	.+60     	; 0x1090 <__mulsf3_pse+0xa0>
    1054:	88 23       	and	r24, r24
    1056:	4a f0       	brmi	.+18     	; 0x106a <__mulsf3_pse+0x7a>
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	bb 1f       	adc	r27, r27
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	91 50       	subi	r25, 0x01	; 1
    1066:	50 40       	sbci	r21, 0x00	; 0
    1068:	a9 f7       	brne	.-22     	; 0x1054 <__mulsf3_pse+0x64>
    106a:	9e 3f       	cpi	r25, 0xFE	; 254
    106c:	51 05       	cpc	r21, r1
    106e:	80 f0       	brcs	.+32     	; 0x1090 <__mulsf3_pse+0xa0>
    1070:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_inf>
    1074:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_szero>
    1078:	5f 3f       	cpi	r21, 0xFF	; 255
    107a:	e4 f3       	brlt	.-8      	; 0x1074 <__mulsf3_pse+0x84>
    107c:	98 3e       	cpi	r25, 0xE8	; 232
    107e:	d4 f3       	brlt	.-12     	; 0x1074 <__mulsf3_pse+0x84>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b7 95       	ror	r27
    1088:	f7 95       	ror	r31
    108a:	e7 95       	ror	r30
    108c:	9f 5f       	subi	r25, 0xFF	; 255
    108e:	c1 f7       	brne	.-16     	; 0x1080 <__mulsf3_pse+0x90>
    1090:	fe 2b       	or	r31, r30
    1092:	88 0f       	add	r24, r24
    1094:	91 1d       	adc	r25, r1
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret

0000109e <sin>:
    109e:	9f 93       	push	r25
    10a0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_rempio2>
    10a4:	0f 90       	pop	r0
    10a6:	07 fc       	sbrc	r0, 7
    10a8:	ee 5f       	subi	r30, 0xFE	; 254
    10aa:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_sinus>

000010ae <__fp_cmp>:
    10ae:	99 0f       	add	r25, r25
    10b0:	00 08       	sbc	r0, r0
    10b2:	55 0f       	add	r21, r21
    10b4:	aa 0b       	sbc	r26, r26
    10b6:	e0 e8       	ldi	r30, 0x80	; 128
    10b8:	fe ef       	ldi	r31, 0xFE	; 254
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	e8 07       	cpc	r30, r24
    10c0:	f9 07       	cpc	r31, r25
    10c2:	c0 f0       	brcs	.+48     	; 0x10f4 <__fp_cmp+0x46>
    10c4:	12 16       	cp	r1, r18
    10c6:	13 06       	cpc	r1, r19
    10c8:	e4 07       	cpc	r30, r20
    10ca:	f5 07       	cpc	r31, r21
    10cc:	98 f0       	brcs	.+38     	; 0x10f4 <__fp_cmp+0x46>
    10ce:	62 1b       	sub	r22, r18
    10d0:	73 0b       	sbc	r23, r19
    10d2:	84 0b       	sbc	r24, r20
    10d4:	95 0b       	sbc	r25, r21
    10d6:	39 f4       	brne	.+14     	; 0x10e6 <__fp_cmp+0x38>
    10d8:	0a 26       	eor	r0, r26
    10da:	61 f0       	breq	.+24     	; 0x10f4 <__fp_cmp+0x46>
    10dc:	23 2b       	or	r18, r19
    10de:	24 2b       	or	r18, r20
    10e0:	25 2b       	or	r18, r21
    10e2:	21 f4       	brne	.+8      	; 0x10ec <__fp_cmp+0x3e>
    10e4:	08 95       	ret
    10e6:	0a 26       	eor	r0, r26
    10e8:	09 f4       	brne	.+2      	; 0x10ec <__fp_cmp+0x3e>
    10ea:	a1 40       	sbci	r26, 0x01	; 1
    10ec:	a6 95       	lsr	r26
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	81 1d       	adc	r24, r1
    10f2:	81 1d       	adc	r24, r1
    10f4:	08 95       	ret
    10f6:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_nan>

000010fa <__fp_rempio2>:
    10fa:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_splitA>
    10fe:	d8 f3       	brcs	.-10     	; 0x10f6 <__fp_cmp+0x48>
    1100:	e8 94       	clt
    1102:	e0 e0       	ldi	r30, 0x00	; 0
    1104:	bb 27       	eor	r27, r27
    1106:	9f 57       	subi	r25, 0x7F	; 127
    1108:	f0 f0       	brcs	.+60     	; 0x1146 <__fp_rempio2+0x4c>
    110a:	2a ed       	ldi	r18, 0xDA	; 218
    110c:	3f e0       	ldi	r19, 0x0F	; 15
    110e:	49 ec       	ldi	r20, 0xC9	; 201
    1110:	06 c0       	rjmp	.+12     	; 0x111e <__fp_rempio2+0x24>
    1112:	ee 0f       	add	r30, r30
    1114:	bb 0f       	add	r27, r27
    1116:	66 1f       	adc	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	28 f0       	brcs	.+10     	; 0x1128 <__fp_rempio2+0x2e>
    111e:	b2 3a       	cpi	r27, 0xA2	; 162
    1120:	62 07       	cpc	r22, r18
    1122:	73 07       	cpc	r23, r19
    1124:	84 07       	cpc	r24, r20
    1126:	28 f0       	brcs	.+10     	; 0x1132 <__fp_rempio2+0x38>
    1128:	b2 5a       	subi	r27, 0xA2	; 162
    112a:	62 0b       	sbc	r22, r18
    112c:	73 0b       	sbc	r23, r19
    112e:	84 0b       	sbc	r24, r20
    1130:	e3 95       	inc	r30
    1132:	9a 95       	dec	r25
    1134:	72 f7       	brpl	.-36     	; 0x1112 <__fp_rempio2+0x18>
    1136:	80 38       	cpi	r24, 0x80	; 128
    1138:	30 f4       	brcc	.+12     	; 0x1146 <__fp_rempio2+0x4c>
    113a:	9a 95       	dec	r25
    113c:	bb 0f       	add	r27, r27
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	d2 f7       	brpl	.-12     	; 0x113a <__fp_rempio2+0x40>
    1146:	90 48       	sbci	r25, 0x80	; 128
    1148:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__fp_mpack_finite>

0000114c <__fp_sinus>:
    114c:	ef 93       	push	r30
    114e:	e0 ff       	sbrs	r30, 0
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <__fp_sinus+0x14>
    1152:	a2 ea       	ldi	r26, 0xA2	; 162
    1154:	2a ed       	ldi	r18, 0xDA	; 218
    1156:	3f e0       	ldi	r19, 0x0F	; 15
    1158:	49 ec       	ldi	r20, 0xC9	; 201
    115a:	5f eb       	ldi	r21, 0xBF	; 191
    115c:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3x>
    1160:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_round>
    1164:	0f 90       	pop	r0
    1166:	03 94       	inc	r0
    1168:	01 fc       	sbrc	r0, 1
    116a:	90 58       	subi	r25, 0x80	; 128
    116c:	e4 eb       	ldi	r30, 0xB4	; 180
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_powsodd>

00001174 <__fp_mpack>:
    1174:	9f 3f       	cpi	r25, 0xFF	; 255
    1176:	31 f0       	breq	.+12     	; 0x1184 <__fp_mpack_finite+0xc>

00001178 <__fp_mpack_finite>:
    1178:	91 50       	subi	r25, 0x01	; 1
    117a:	20 f4       	brcc	.+8      	; 0x1184 <__fp_mpack_finite+0xc>
    117c:	87 95       	ror	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	88 0f       	add	r24, r24
    1186:	91 1d       	adc	r25, r1
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__fp_powsodd>:
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	7f 93       	push	r23
    1196:	6f 93       	push	r22
    1198:	ff 93       	push	r31
    119a:	ef 93       	push	r30
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3>
    11a4:	ef 91       	pop	r30
    11a6:	ff 91       	pop	r31
    11a8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fp_powser>
    11ac:	2f 91       	pop	r18
    11ae:	3f 91       	pop	r19
    11b0:	4f 91       	pop	r20
    11b2:	5f 91       	pop	r21
    11b4:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__mulsf3>

000011b8 <__fp_powser>:
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	1f 93       	push	r17
    11be:	0f 93       	push	r16
    11c0:	ff 92       	push	r15
    11c2:	ef 92       	push	r14
    11c4:	df 92       	push	r13
    11c6:	7b 01       	movw	r14, r22
    11c8:	8c 01       	movw	r16, r24
    11ca:	68 94       	set
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <__fp_powser+0x22>
    11ce:	da 2e       	mov	r13, r26
    11d0:	ef 01       	movw	r28, r30
    11d2:	0e 94 f5 07 	call	0xfea	; 0xfea <__mulsf3x>
    11d6:	fe 01       	movw	r30, r28
    11d8:	e8 94       	clt
    11da:	a5 91       	lpm	r26, Z+
    11dc:	25 91       	lpm	r18, Z+
    11de:	35 91       	lpm	r19, Z+
    11e0:	45 91       	lpm	r20, Z+
    11e2:	55 91       	lpm	r21, Z+
    11e4:	a6 f3       	brts	.-24     	; 0x11ce <__fp_powser+0x16>
    11e6:	ef 01       	movw	r28, r30
    11e8:	0e 94 52 06 	call	0xca4	; 0xca4 <__addsf3x>
    11ec:	fe 01       	movw	r30, r28
    11ee:	97 01       	movw	r18, r14
    11f0:	a8 01       	movw	r20, r16
    11f2:	da 94       	dec	r13
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <__fp_powser+0x18>
    11f6:	df 90       	pop	r13
    11f8:	ef 90       	pop	r14
    11fa:	ff 90       	pop	r15
    11fc:	0f 91       	pop	r16
    11fe:	1f 91       	pop	r17
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <__udivmodhi4>:
    1206:	aa 1b       	sub	r26, r26
    1208:	bb 1b       	sub	r27, r27
    120a:	51 e1       	ldi	r21, 0x11	; 17
    120c:	07 c0       	rjmp	.+14     	; 0x121c <__udivmodhi4_ep>

0000120e <__udivmodhi4_loop>:
    120e:	aa 1f       	adc	r26, r26
    1210:	bb 1f       	adc	r27, r27
    1212:	a6 17       	cp	r26, r22
    1214:	b7 07       	cpc	r27, r23
    1216:	10 f0       	brcs	.+4      	; 0x121c <__udivmodhi4_ep>
    1218:	a6 1b       	sub	r26, r22
    121a:	b7 0b       	sbc	r27, r23

0000121c <__udivmodhi4_ep>:
    121c:	88 1f       	adc	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	5a 95       	dec	r21
    1222:	a9 f7       	brne	.-22     	; 0x120e <__udivmodhi4_loop>
    1224:	80 95       	com	r24
    1226:	90 95       	com	r25
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	08 95       	ret

0000122e <__divmodhi4>:
    122e:	97 fb       	bst	r25, 7
    1230:	07 2e       	mov	r0, r23
    1232:	16 f4       	brtc	.+4      	; 0x1238 <__divmodhi4+0xa>
    1234:	00 94       	com	r0
    1236:	07 d0       	rcall	.+14     	; 0x1246 <__divmodhi4_neg1>
    1238:	77 fd       	sbrc	r23, 7
    123a:	09 d0       	rcall	.+18     	; 0x124e <__divmodhi4_neg2>
    123c:	0e 94 03 09 	call	0x1206	; 0x1206 <__udivmodhi4>
    1240:	07 fc       	sbrc	r0, 7
    1242:	05 d0       	rcall	.+10     	; 0x124e <__divmodhi4_neg2>
    1244:	3e f4       	brtc	.+14     	; 0x1254 <__divmodhi4_exit>

00001246 <__divmodhi4_neg1>:
    1246:	90 95       	com	r25
    1248:	81 95       	neg	r24
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	08 95       	ret

0000124e <__divmodhi4_neg2>:
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255

00001254 <__divmodhi4_exit>:
    1254:	08 95       	ret

00001256 <__udivmodsi4>:
    1256:	a1 e2       	ldi	r26, 0x21	; 33
    1258:	1a 2e       	mov	r1, r26
    125a:	aa 1b       	sub	r26, r26
    125c:	bb 1b       	sub	r27, r27
    125e:	fd 01       	movw	r30, r26
    1260:	0d c0       	rjmp	.+26     	; 0x127c <__udivmodsi4_ep>

00001262 <__udivmodsi4_loop>:
    1262:	aa 1f       	adc	r26, r26
    1264:	bb 1f       	adc	r27, r27
    1266:	ee 1f       	adc	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	a2 17       	cp	r26, r18
    126c:	b3 07       	cpc	r27, r19
    126e:	e4 07       	cpc	r30, r20
    1270:	f5 07       	cpc	r31, r21
    1272:	20 f0       	brcs	.+8      	; 0x127c <__udivmodsi4_ep>
    1274:	a2 1b       	sub	r26, r18
    1276:	b3 0b       	sbc	r27, r19
    1278:	e4 0b       	sbc	r30, r20
    127a:	f5 0b       	sbc	r31, r21

0000127c <__udivmodsi4_ep>:
    127c:	66 1f       	adc	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	88 1f       	adc	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	1a 94       	dec	r1
    1286:	69 f7       	brne	.-38     	; 0x1262 <__udivmodsi4_loop>
    1288:	60 95       	com	r22
    128a:	70 95       	com	r23
    128c:	80 95       	com	r24
    128e:	90 95       	com	r25
    1290:	9b 01       	movw	r18, r22
    1292:	ac 01       	movw	r20, r24
    1294:	bd 01       	movw	r22, r26
    1296:	cf 01       	movw	r24, r30
    1298:	08 95       	ret

0000129a <__umulhisi3>:
    129a:	a2 9f       	mul	r26, r18
    129c:	b0 01       	movw	r22, r0
    129e:	b3 9f       	mul	r27, r19
    12a0:	c0 01       	movw	r24, r0
    12a2:	a3 9f       	mul	r26, r19
    12a4:	70 0d       	add	r23, r0
    12a6:	81 1d       	adc	r24, r1
    12a8:	11 24       	eor	r1, r1
    12aa:	91 1d       	adc	r25, r1
    12ac:	b2 9f       	mul	r27, r18
    12ae:	70 0d       	add	r23, r0
    12b0:	81 1d       	adc	r24, r1
    12b2:	11 24       	eor	r1, r1
    12b4:	91 1d       	adc	r25, r1
    12b6:	08 95       	ret

000012b8 <__muluhisi3>:
    12b8:	0e 94 4d 09 	call	0x129a	; 0x129a <__umulhisi3>
    12bc:	a5 9f       	mul	r26, r21
    12be:	90 0d       	add	r25, r0
    12c0:	b4 9f       	mul	r27, r20
    12c2:	90 0d       	add	r25, r0
    12c4:	a4 9f       	mul	r26, r20
    12c6:	80 0d       	add	r24, r0
    12c8:	91 1d       	adc	r25, r1
    12ca:	11 24       	eor	r1, r1
    12cc:	08 95       	ret

000012ce <_exit>:
    12ce:	f8 94       	cli

000012d0 <__stop_program>:
    12d0:	ff cf       	rjmp	.-2      	; 0x12d0 <__stop_program>
